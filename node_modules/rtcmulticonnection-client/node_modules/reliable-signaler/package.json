{
  "name": "reliable-signaler",
  "preferGlobal": true,
  "version": "1.0.2",
  "author": {
    "name": "Muaz Khan",
    "email": "muazkh@gmail.com",
    "url": "http://www.muazkhan.com/"
  },
  "description": "Reliable signaling implementation for RTCMultiConnection.js, DataChannel.js and WebRTC Experiments.",
  "scripts": {
    "start": "node index.js"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/muaz-khan/Reliable-Signaler.git"
  },
  "keywords": [
    "webrtc",
    "signaler",
    "signaling",
    "reliable",
    "javascript",
    "rtcmulticonnection",
    "webrtc-experiment",
    "muaz",
    "muaz-khan"
  ],
  "analyze": false,
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/muaz-khan/Reliable-Signaler/issues",
    "email": "muazkh@gmail.com"
  },
  "homepage": "https://github.com/muaz-khan/WebRTC-Experiment",
  "_from": "reliable-signaler@1.0.2",
  "readme": "# Reliable Signaler  [![npm](https://img.shields.io/npm/v/reliable-signaler.svg)](https://npmjs.org/package/reliable-signaler) [![downloads](https://img.shields.io/npm/dm/reliable-signaler.svg)](https://npmjs.org/package/reliable-signaler)\r\n\r\nIt is a node.js and socket.io based reliable signaling implementation. Remember, reliable doesn't mean \"scalable\"; reliable simply means that it auto reconnects in any kind of failure or internet disconnect. It is having following features:\r\n\r\n1. Auto reconnects if node.js gets down out of any reason.\r\n2. Auto reconnects if internet connection disconnects.\r\n3. It provides [custom-signaling](https://github.com/muaz-khan/RTCMultiConnection/wiki/Custom-Private-Servers#signaling-servers) for your [RTCMultiConnection](https://github.com/muaz-khan/RTCMultiConnection) and [DataChannel](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/DataChannel) applications!\r\n\r\n```\r\nnpm install reliable-signaler\r\n```\r\n\r\n# How it works?\r\n\r\n1. You can store a room-id on server using `createNewRoomOnServer` method.\r\n2. You can get that room-id using `getRoomFromServer` method.\r\n\r\n# How to use?\r\n\r\n1. In your Node.js server, invoke `require('reliable-signaler')` and pass HTTP-Server object.\r\n2. In your HTML file, link this script: `/reliable-signaler/signaler.js`\r\n3. In your `<script>` tag, invoke `initReliableSignaler` constructor.\r\n4. Invoke `createNewRoomOnServer` method for room-moderator.\r\n5. Invoke `getRoomFromServer` method from room-participants (multiple participants).\r\n\r\n# Demos\r\n\r\n* `rtcmulticonnection-client`: [![npm](https://img.shields.io/npm/v/rtcmulticonnection-client.svg)](https://npmjs.org/package/rtcmulticonnection-client) [![downloads](https://img.shields.io/npm/dm/rtcmulticonnection-client.svg)](https://npmjs.org/package/rtcmulticonnection-client)\r\n* `datachannel-client`: [![npm](https://img.shields.io/npm/v/datachannel-client.svg)](https://npmjs.org/package/datachannel-client) [![downloads](https://img.shields.io/npm/dm/datachannel-client.svg)](https://npmjs.org/package/datachannel-client)\r\n* `videoconferencing-client`: [![npm](https://img.shields.io/npm/v/videoconferencing-client.svg)](https://npmjs.org/package/videoconferencing-client) [![downloads](https://img.shields.io/npm/dm/videoconferencing-client.svg)](https://npmjs.org/package/videoconferencing-client)\r\n\r\n```\r\n# install rtcmulticonnection-client\r\nnpm install rtcmulticonnection-client\r\nnode ./node_modules/rtcmulticonnection-client/server.js\r\n\r\n# or intall datachannel-client\r\nnpm install datachannel-client\r\nnode ./node_modules/datachannel-client/server.js\r\n\r\n# or intall videoconferencing-client\r\nnpm install videoconferencing-client\r\nnode ./node_modules/videoconferencing-client/server.js\r\n```\r\n\r\nNow open localhost port:`8080`.\r\n\r\n# 1st Step: Node.js Server-side code\r\n\r\nTo use it in your node.js code: (required)\r\n\r\n```javascript\r\nvar httpServer = require('http').createServer(callback);\r\n\r\nrequire('reliable-signaler')(httpServer || expressServer || portNumber, {\r\n    // for custom socket handlers\r\n    socketCallback: function(socket) {\r\n        socket.on('custom-handler', function(message) {\r\n            socket.broadcast.emit('custom-handler', message);\r\n        });\r\n    }\r\n});\r\n```\r\n\r\nConstructor of the module `reliable-signaler` takes an `config` object where you can pass `socketCallback` and other configurations:\r\n\r\n```javascript\r\nvar config = {\r\n    socketCallback: function(socket) {}\r\n};\r\nrequire('reliable-signaler')(httpServer, config);\r\n```\r\n\r\n*. `socketCallback`: If you want to attach custom handlers over socket object.\r\n\r\n# 2nd Step: Browser-side code\r\n\r\nTo use it in the browser: (required)\r\n\r\n```htm\r\n<script src=\"/reliable-signaler/signaler.js\"></script>\r\n```\r\n\r\nAnd your client-side javascript code:\r\n\r\n```javascript\r\nvar connection = new RTCMultiConnection();\r\n\r\n// invoke \"initReliableSignaler\" and pass \"connection\" or \"channel\" object\r\nvar signaler = initReliableSignaler(connection, 'http://domain:port/');\r\n```\r\n\r\nCall `createNewRoomOnServer` method as soon as you'll call `open` method. You can even call `createNewRoomOnServer` earlier than `open` however it isn't suggested:\r\n\r\nFor RTCMultiConnection: \r\n\r\n```javascript\r\n// for data-only sessions\r\nconnection.open();\r\nsignaler.createNewRoomOnServer(connection.sessionid);\r\n\r\n// or (not recommended)\r\nsignaler.createNewRoomOnServer(connection.sessionid, function() {\r\n    connection.open();\r\n});\r\n\r\n// or --- recommended.\r\nconnection.open({\r\n    onMediaCaptured: function() {\r\n        signaler.createNewRoomOnServer(connection.sessionid);\r\n    }\r\n});\r\n```\r\n\r\nFor DataChannel: \r\n\r\n```javascript\r\nchannel.open('room-id');\r\nsignaler.createNewRoomOnServer('room-id', successCallback);\r\n```\r\n\r\nFor participants, call `getRoomFromServer` method:\r\n\r\n```javascript\r\n// RTCMultiConnection\r\nsignaler.getRoomFromServer('sessioin-id', function(roomid) {\r\n    // invoke \"join\" in callback\r\n    connection.join({\r\n        sessionid: roomid,\r\n        userid: roomid,\r\n        extra: {},\r\n        session: connection.session\r\n    });\r\n    \r\n    // or simply\r\n    connection.join(roomid);\r\n    \r\n    // or\r\n    connection.connect(roomid);\r\n});\r\n\r\n// DataChannel\r\nsignaler.getRoomFromServer('sessioin-id', function(roomid) {\r\n    channel.join({\r\n        id: roomid,\r\n        owner: roomid\r\n    });\r\n    \r\n    // or\r\n    channel.connect(roomid);\r\n});\r\n```\r\n\r\n# Complete Client-Side Example for RTCMultiConnection\r\n\r\n```html\r\n<script src=\"/reliable-signaler/signaler.js\"></script>\r\n<script>\r\nvar connection = new RTCMultiConnection();\r\n\r\nvar signaler = initReliableSignaler(connection, '/');\r\n\r\nbtnOpenRoom.onclick = function() {\r\n    connection.channel = connection.sessionid = connection.userid = sessionid;\r\n    connection.open({\r\n        onMediaCaptured: function() {\r\n            signaler.createNewRoomOnServer(connection.sessionid);\r\n        }\r\n    });\r\n};\r\n\r\nbtnJoinRoom.onclick = function() {\r\n    signaler.getRoomFromServer(roomid, function(roomid){\r\n        connection.channel = connection.sessionid = roomid;\r\n        connection.join({\r\n            sessionid: roomid,\r\n            userid: roomid,\r\n            extra: {},\r\n            session: connection.session\r\n        });\r\n    });\r\n};\r\n</script>\r\n```\r\n\r\n# Complete Client-Side Example for DataChannel\r\n\r\n```html\r\n<script src=\"/reliable-signaler/signaler.js\"></script>\r\n<script>\r\nvar channel = new DataChannel();\r\n\r\nvar signaler = initReliableSignaler(channel, '/');\r\n\r\nbtnOpenRoom.onclick = function() {\r\n    signaler.createNewRoomOnServer(roomid, function() {\r\n        channel.channel = channel.userid = roomid;\r\n        channel.open(roomid);\r\n    });\r\n};\r\n\r\nbtnJoinRoom.onclick = function() {\r\n    signaler.getRoomFromServer(roomid, function(roomid){\r\n        channel.channel = roomid;\r\n        channel.join({\r\n            id: roomid,\r\n            owner: roomid\r\n        });\r\n    });\r\n};\r\n</script>\r\n```\r\n\r\n## API Reference\r\n\r\nConstructor takes either `RTCMultiConnection` instance or a `config` object:\r\n\r\n```javascript\r\n# 1st option: Pass RTCMultiConnection object\r\nvar signaler = initReliableSignaler(connection);\r\n\r\n# 2nd option: Pass \"config\" object\r\nvar signaler = initReliableSignaler(connection, '/');\r\n```\r\n\r\n`initReliableSignaler` global-function exposes/returns 3-objects:\r\n\r\n1. `socket`\r\n2. `createNewRoomOnServer`\r\n3. `getRoomFromServer`\r\n\r\n```javascript\r\n// \"socket\" object\r\nsignaler.socket.emit('message', 'hello');\r\n\r\n// \"createNewRoomOnServer\" method\r\nsignaler.createNewRoomOnServer(connection.sessionid, successCallback);\r\n\r\n// \"getRoomFromServer\" object\r\nsignaler.getRoomFromServer('sessioin-id', callback);\r\n```\r\n\r\n## `createNewRoomOnServer`\r\n\r\nThis method simply takes `sessioin-id` and stores in node.js server. You can even pass `successCallback`.\r\n\r\n```javascript\r\nsignaler.createNewRoomOnServer(roomid, successCallback);\r\n```\r\n\r\n## `getRoomFromServer`\r\n\r\nThis method looks for active `sessioin-id` in node.js server. Node.js server will fire callback only when session is found.\r\n\r\nIf session is absent, then node.js server will wait until someone opens that session; and node.js will fire `getRoomFromServer-callback` as soon a session is opened.\r\n\r\n```javascript\r\nsignaler.getRoomFromServer(roomid, successCallback);\r\n```\r\n\r\n## License\r\n\r\n[Reliable-Signaler](https://github.com/muaz-khan/Reliable-Signaler) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) [Muaz Khan](https://plus.google.com/+MuazKhan).\r\n",
  "_id": "reliable-signaler@1.0.2"
}
